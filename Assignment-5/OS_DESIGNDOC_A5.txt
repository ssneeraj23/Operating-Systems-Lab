DESIGN DOC 
Group Members-
Aditya Pandiri- 20CS10042
Neeraj Boddeda- 20CS30012
Mohan Kishore Chilukuri- 20CS30014
Gitanjali Gupta- 20CS30019








DATA STRUCTURE:
Multiset rooms_prio  to maintain a list of rooms and the guest's priority. When the rooms are empty, their priorities are initialized as -1. As the rooms fill up with guests, the priority field is updated with the priority of the room entered. If the 2nd occupant comes, the priority is updated to Y ( max possible priority- so that no one can replace it now).


A struct is also defined which has the following members: ‘g_count’ which maintains the count of guests since the time it was last cleaned, ‘timestayed’ will save the time for which the guests stay in the room( assumed to be equal to the full time the first occupant wanted to stay in that room), and ‘current_guest_priority’ will save the priority of the guest staying the room currently.


USAGE OF SEMAPHORES:
Semaphores here have been used to effectively use all the rooms clean and vacant so that resources are used efficiently. This is to maintain the 2*N occupancy condition after which the cleaners come and clean the room. And then the entire process of guest allocation restarts and continues again.


OVERALL DESIGN:
First, the guest threads are created along with the cleaner threads, and all are concurrently running. Whenever a guest tries to get into an unoccupied room, we update the g_count and time_stayed of that specific room. Also, the rooms_prio data structure is updated with the currently filled room number and the priority of the guest staying in it. When the guest tries to get into an occupied room (based on the priority), the g_count alone is updated for the room node(since the time_stayed is assumed to be dependent on the first guest’s stay time) and in the rooms_prio we insert to change the priority of guest entered to ‘Y’(max possible guest priority) so that now it cannot be replaced by any other guest and indirectly satisfying the condition of 2*N occupancy. Also, to ensure that the threads don't enter the unclean rooms, we have maintained a semaphore, which makes the thread wait when the occupancy is 2*N and non of the rooms are cleaned. The insert into the multiset and modification of the room elements have been made atomic using simple mutex locks. Also once the occupancy reaches 2*N, we signal all the cleaner threads by broadcasting the clean_start conditional variable.
 The cleaners wait till the clean_start conditional variable is signaled. These threads sleep for a time proportional to the time the first guest stayed(stored in time_stayed of the room data structure) in the particular room the cleaner has been allocated (this allocation happens randomly). The values inside the room are reset to initial values and after the number of uncleaned rooms is 0, we signal the guest threads waiting on total_occupancy to become 2*N again (semaphore used above). The changes in the room node and the multiset rooms_prio is done atomically with the use of simple mutex locks.